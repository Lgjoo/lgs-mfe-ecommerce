# Dockerfile Multi-Estratégia - Suporta todas as estratégias de CI/CD
# Foco: Flexibilidade e compatibilidade com diferentes abordagens

FROM node:22-alpine AS builder

# Definir variáveis de ambiente para build
ENV NODE_ENV=production
ENV NPM_CONFIG_PRODUCTION=false

WORKDIR /app

# Copiar arquivos de dependências primeiro (para cache)
COPY package*.json ./
RUN npm ci --only=production

# Copiar código fonte
COPY . .

# Build da aplicação
RUN npm run build

# Imagem de produção
FROM nginx:alpine

# Instalar todas as ferramentas necessárias para todas as estratégias
RUN apk add --no-cache \
    curl \
    jq \
    bc \
    && rm -rf /var/cache/apk/*

# Copiar arquivos buildados
COPY --from=builder /app/dist/lgs-mfe-container /usr/share/nginx/html

# Configuração do Nginx
RUN rm /etc/nginx/conf.d/default.conf
COPY nginx.conf /etc/nginx/conf.d/default.conf.template

# Scripts para todas as estratégias
COPY start.sh /start.sh
COPY health-check.sh /health-check.sh

# Scripts específicos por estratégia
COPY strategies/01-simple-deploy/simple-deploy.sh /scripts/simple-deploy.sh
COPY strategies/02-blue-green/blue-green-deploy.sh /scripts/blue-green-deploy.sh
COPY strategies/03-canary/canary-deploy.sh /scripts/canary-deploy.sh
COPY strategies/04-rolling-updates/rolling-deploy.sh /scripts/rolling-deploy.sh

# Tornar todos os scripts executáveis
RUN chmod +x /start.sh /health-check.sh /scripts/*.sh

# Health check configurável
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /health-check.sh

# Expor porta
EXPOSE 4200

# Comando de inicialização
CMD ["/start.sh"]


