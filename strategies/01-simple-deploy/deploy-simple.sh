#!/bin/bash

# Simple Deploy Script - Estrat√©gia SEM Zero Downtime
# Este script implementa deploy direto com downtime

set -e

# Detectar diret√≥rio do projeto
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$(dirname "$SCRIPT_DIR")")"

APP_NAME=${1:-"lgs-mfe-container"}
NEW_IMAGE=${2:-"latest"}
CONTAINER_PORT=${3:-"4200"}

echo "üöÄ Iniciando Deploy Direto para $APP_NAME"
echo "üì¶ Nova Imagem: $NEW_IMAGE"
echo "‚ö†Ô∏è  ATEN√á√ÉO: Esta estrat√©gia ter√° DOWNTIME!"

# Fun√ß√£o para verificar se container est√° rodando
check_container_running() {
    local container_name=$1
    if docker ps --format "table {{.Names}}" | grep -q "^${container_name}$"; then
        return 0
    else
        return 1
    fi
}

# Fun√ß√£o para health check
health_check() {
    local container_name=$1
    local port=$2
    
    echo "üè• Verificando sa√∫de de $container_name..."
    
    # Aguardar container estar pronto
    sleep 10
    
    # Tentar health check
    if curl -f "http://localhost:$port/health" > /dev/null 2>&1; then
        echo "‚úÖ $container_name est√° saud√°vel"
        return 0
    else
        echo "‚ùå $container_name n√£o est√° respondendo"
        return 1
    fi
}

# Backup da vers√£o atual
if check_container_running "$APP_NAME"; then
    echo "üíæ Fazendo backup da vers√£o atual..."
    CURRENT_IMAGE=$(docker inspect --format='{{.Config.Image}}' "$APP_NAME")
    echo "üìã Vers√£o atual: $CURRENT_IMAGE"
    
    # Tag da vers√£o atual como backup
    docker tag "$CURRENT_IMAGE" "${APP_NAME}:backup-$(date +%Y%m%d-%H%M%S)"
else
    echo "‚ÑπÔ∏è  Container $APP_NAME n√£o est√° rodando"
fi

# Parar e remover container atual
echo "üõë Parando container atual..."
docker stop "$APP_NAME" 2>/dev/null || true
docker rm "$APP_NAME" 2>/dev/null || true

# Build da nova imagem
echo "üî® Construindo nova imagem..."
cd "$PROJECT_ROOT/$APP_NAME" || exit 1
docker build -t "$APP_NAME:$NEW_IMAGE" .
cd "$PROJECT_ROOT/strategies/01-simple-deploy"

# Deploy da nova vers√£o
echo "üöÄ Deployando nova vers√£o..."
docker run -d \
    --name "$APP_NAME" \
    --network mfe-network \
    -p "$CONTAINER_PORT:4200" \
    "$APP_NAME:$NEW_IMAGE"

# Health check
if health_check "$APP_NAME" "$CONTAINER_PORT"; then
    echo "üéâ Deploy conclu√≠do com sucesso!"
    echo "üåê Aplica√ß√£o dispon√≠vel em: http://localhost:$CONTAINER_PORT"
else
    echo "‚ùå Deploy falhou! Fazendo rollback..."
    
    # Rollback autom√°tico
    if docker images | grep -q "${APP_NAME}:backup"; then
        echo "üîÑ Fazendo rollback para vers√£o anterior..."
        docker stop "$APP_NAME" 2>/dev/null || true
        docker rm "$APP_NAME" 2>/dev/null || true
        
        # Encontrar backup mais recente
        BACKUP_IMAGE=$(docker images --format "table {{.Repository}}:{{.Tag}}" | grep "${APP_NAME}:backup" | head -1)
        
        if [ -n "$BACKUP_IMAGE" ]; then
            docker run -d \
                --name "$APP_NAME" \
                --network mfe-network \
                -p "$CONTAINER_PORT:4200" \
                "$BACKUP_IMAGE"
            
                    echo "‚úÖ Rollback conclu√≠do"
    else
        echo "‚ùå Falha no rollback - backup n√£o encontrado"
        exit 1
    fi
else
    echo "‚ùå Falha no rollback - sem backup dispon√≠vel"
    exit 1
fi

echo ""
echo "‚è∏Ô∏è  Pressione ENTER para fechar..."
read -r
fi
