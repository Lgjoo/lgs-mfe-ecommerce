#!/bin/bash

# Script de Debug para Identificar Problemas de Caminhos
# Este script mostra exatamente onde estamos e o que est√° dispon√≠vel

set -e

echo "üîç DEBUG: Verificando Caminhos e Estrutura"
echo "=========================================="
echo ""

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log colorido
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

echo "üìÅ INFORMA√á√ïES DE DIRET√ìRIO"
echo "============================"

# Diret√≥rio atual
log_info "Diret√≥rio atual (pwd):"
echo "   $(pwd)"
echo ""

# Diret√≥rio do script
log_info "Diret√≥rio do script:"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "   $SCRIPT_DIR"
echo ""

# Diret√≥rio raiz do projeto (assumindo que strategies/ est√° um n√≠vel acima)
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
log_info "Diret√≥rio raiz do projeto (assumido):"
echo "   $PROJECT_ROOT"
echo ""

# Verificar se PROJECT_ROOT est√° correto
if [ -d "$PROJECT_ROOT/lgs-mfe-container" ]; then
    log_success "‚úÖ Diret√≥rio lgs-mfe-container encontrado em PROJECT_ROOT"
else
    log_error "‚ùå Diret√≥rio lgs-mfe-container N√ÉO encontrado em PROJECT_ROOT"
    
    # Tentar encontrar o diret√≥rio correto
    log_info "üîç Procurando por lgs-mfe-container..."
    
    # Procurar em diret√≥rios pais
    CURRENT_DIR="$(pwd)"
    PARENT_DIR="$(dirname "$CURRENT_DIR")"
    GRANDPARENT_DIR="$(dirname "$PARENT_DIR")"
    
    echo "   Diret√≥rio atual: $CURRENT_DIR"
    echo "   Diret√≥rio pai: $PARENT_DIR"
    echo "   Diret√≥rio av√¥: $GRANDPARENT_DIR"
    echo ""
    
    # Verificar cada diret√≥rio
    for dir in "$CURRENT_DIR" "$PARENT_DIR" "$GRANDPARENT_DIR"; do
        if [ -d "$dir/lgs-mfe-container" ]; then
            log_success "‚úÖ lgs-mfe-container encontrado em: $dir"
            PROJECT_ROOT="$dir"
            break
        fi
    done
    
    if [ -z "$PROJECT_ROOT" ] || [ ! -d "$PROJECT_ROOT/lgs-mfe-container" ]; then
        log_error "‚ùå N√£o foi poss√≠vel encontrar lgs-mfe-container"
        log_info "Execute este script do diret√≥rio raiz do projeto"
        exit 1
    fi
fi

echo ""

# Verificar estrutura do projeto
log_info "üìÇ ESTRUTURA DO PROJETO"
echo "============================"

echo "Diret√≥rio raiz confirmado: $PROJECT_ROOT"
echo ""

# Verificar diret√≥rios principais
for dir in "lgs-mfe-container" "lgs-mfe-catalog" "lgs-mfe-cart" "strategies"; do
    if [ -d "$PROJECT_ROOT/$dir" ]; then
        log_success "‚úÖ $dir encontrado"
    else
        log_error "‚ùå $dir N√ÉO encontrado"
    fi
done

echo ""

# Verificar estrat√©gias
log_info "üß™ ESTRAT√âGIAS DISPON√çVEIS"
echo "=============================="

if [ -d "$PROJECT_ROOT/strategies" ]; then
    cd "$PROJECT_ROOT/strategies"
    
    for strategy in "01-simple-deploy" "02-blue-green" "03-canary" "04-rolling-updates"; do
        if [ -d "$strategy" ]; then
            log_success "‚úÖ $strategy encontrado"
            
            # Verificar scripts
            cd "$strategy"
            for script in *.sh; do
                if [ -f "$script" ]; then
                    if [ -x "$script" ]; then
                        log_success "   ‚úÖ $script (execut√°vel)"
                    else
                        log_warning "   ‚ö†Ô∏è  $script (n√£o execut√°vel)"
                    fi
                fi
            done
            cd ..
        else
            log_error "‚ùå $strategy N√ÉO encontrado"
        fi
    done
    
    cd "$PROJECT_ROOT"
else
    log_error "‚ùå Diret√≥rio strategies n√£o encontrado"
fi

echo ""

# Verificar Docker
log_info "üê≥ VERIFICA√á√ÉO DO DOCKER"
echo "============================"

if command -v docker &> /dev/null; then
    log_success "‚úÖ Docker instalado"
    
    if docker version &> /dev/null; then
        log_success "‚úÖ Docker rodando"
        
        # Verificar rede
        if docker network ls | grep -q "mfe-network"; then
            log_success "‚úÖ Rede mfe-network existe"
        else
            log_warning "‚ö†Ô∏è  Rede mfe-network n√£o existe"
        fi
        
        # Verificar imagens
        log_info "Imagens dispon√≠veis:"
        docker images | grep "lgs-mfe" || log_warning "Nenhuma imagem lgs-mfe encontrada"
        
    else
        log_error "‚ùå Docker n√£o est√° rodando"
    fi
else
    log_error "‚ùå Docker n√£o instalado"
fi

echo ""

# Resumo e recomenda√ß√µes
log_info "üìã RESUMO E RECOMENDA√á√ïES"
echo "============================="

echo "Para resolver os problemas de caminho:"
echo ""
echo "1. Execute os scripts do diret√≥rio raiz do projeto:"
echo "   cd $PROJECT_ROOT"
echo ""
echo "2. Ou use caminhos absolutos:"
echo "   bash $PROJECT_ROOT/strategies/test-all-strategies.sh"
echo ""
echo "3. Ou use o script de teste r√°pido:"
echo "   bash $PROJECT_ROOT/strategies/quick-test.sh"
echo ""

log_info "üéØ Diret√≥rio raiz correto identificado: $PROJECT_ROOT"
log_info "Execute os comandos acima para resolver os problemas de caminho"

echo ""
log_info "‚è∏Ô∏è  Pressione ENTER para fechar..."
read -r
